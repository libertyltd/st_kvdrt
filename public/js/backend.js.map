{"version":3,"sources":["backend.js","countdown.js","imagepicker.js","imagepickermult.js","order_design_switcher.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrtvNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"backend.js","sourcesContent":["/**\n * Created by roman on 29.06.16.\n */\n$(document).ready(function () {\n    /**\n     * Инициализация всех тултипов\n     */\n    $('[data-toggle=\"tooltip\"]').tooltip();\n    var $CkEditor = $('[data-toggle=\"ckeditor\"]');\n    for (var i = $CkEditor.length; i--;) {\n        /* Маленькая инициализационная область для CKEditor */\n        var name = $CkEditor.eq(i).attr('name');\n        var id = $CkEditor.eq(i).attr('id');\n\n        var errMessage = false;\n        if (name == undefined) {\n             errMessage = 'Не задан атрибут name!';\n        }\n\n        if (id == undefined) {\n            errMessage += ' Не задан атрибут id!';\n        }\n\n        if (CKEDITOR == undefined) {\n            errMessage += 'Не определен CkEditor';\n        }\n\n        if (errMessage) {\n            errMessage += ' Для элемента '+$CkEditor.eq(i)[0];\n            console.log(errMessage);\n            continue;\n        }\n\n        /* Если же все условия выполнены для замечательной работы CKEditor инициализируем его */\n        CKEDITOR.replace(id);\n    }\n\n\n    $('[data-toggle=\"countdown\"]').countdown();\n    $('[data-toggle=\"imagepicker\"]').imagepicker();\n    $('[data-toggle=\"imagepickermult\"]').imagepickermult();\n});","/**\n * Created by roman on 29.06.16.\n */\n+function ($) {\n    'use strict';\n\n    var CountdownElemForm = function (element, options) {\n        this.$element = $(element);\n        this.CurrentOption = this.getOptions (options);\n        this.$form = this.$element.closest('form');\n        this.intervalId = null;\n        this.countdownState = 'start';\n        this.innerHtml = null;\n\n        var self = this;\n        this.$form.bind('submit.countdown', function () {\n            return self.sendForm();\n        });\n\n        this.$element.bind('click.countdown', function () {\n            if (self.countdownState == 'start') {\n                self.countdownState = 'proccess';\n                self.innerHtml = self.$element.html();\n                self.$element.html(self.CurrentOption.countdownTime);\n                self.intervalId = setInterval(function () {\n                    self.action.call(self);\n                }, self.CurrentOption.countdownIntervalSec*1000);\n            }\n\n            if (self.countdownState == 'end') {\n                return true;\n            }\n            return false;\n        });\n    };\n\n    /**\n     * Сам непосредственный экшн для отсчета\n     */\n    CountdownElemForm.prototype.action = function () {\n        var time = parseInt(this.$element.html());\n        if (time > 0) {\n            time--;\n            this.$element.html(time);\n        } else {\n            this.$element.html(this.innerHtml);\n            this.countdownState = 'end';\n            clearInterval(this.intervalId);\n        }\n    }\n\n    /**\n     * Разршаем отправку формы тогда и только тогда, когда\n     * заканчивается обратный отсчет, до этого форму не отрпавляем\n     * @returns {boolean}\n     */\n    CountdownElemForm.prototype.sendForm = function () {\n        if (this.countdownState !== 'end') {\n            return false;\n        }\n\n        return true;\n    }\n\n    CountdownElemForm.prototype.options = {\n        countdownTime: 3,\n        countdownIntervalSec: 1,\n    };\n\n    CountdownElemForm.prototype.getOptions = function (options) {\n        if (options && (typeof options) == 'Object') {\n            for (var key in this.options) {\n                if (!options[key]) {\n                    options[key] = this.options[key];\n                };\n            }\n\n            return options;\n        }\n\n        return this.options;\n    };\n\n    var Countdown = function (options) {\n        //вернуть надо объект jQuery\n        return this.each(function () {\n            new CountdownElemForm(this, options);\n        });\n    };\n\n\n    var old = $.fn.countdown;\n\n    $.fn.countdown = Countdown;\n    $.fn.countdown.constructor = Countdown;\n\n    $.fn.countdown.noConflict = function () {\n        $.fn.countdown = old;\n        return this;\n    }\n\n}(jQuery);","/**\n * Created by roman on 10.07.16.\n */\n+function ($) {\n    'use strict';\n\n    var ImagePickerElem = function (element, option) {\n        this.template = '<div class=\"imagepicker__container\">'+\n                            '<label class=\"imagepicker\">'+\n                                '<div class=\"imagepicker__hover-place\">'+\n                                '</div>'+\n                                '<div class=\"imagepicker__action\">'+\n                                    '<button class=\"imagepicker__btn imagepicker__btn_remove\"><i class=\"fa fa-trash-o\" aria-hidden=\"true\"></i></button>'+\n                                '</div>'+\n                            '</label>'+\n                        '</div>';\n        this.inputClass = 'imagepicker__input';\n        this.templateImg = '<img class=\"imagepicker__miniature img-responsive\">';\n        this.$element = $(element);\n\n        this.init();\n\n        var self = this;\n        this.$element.on('change', function () {\n            self.changedImage();\n        });\n\n        if (!this.$element.data('nodelete')) {\n            this.$removeBth.bind('click', function () {\n                var nameDeleteInput = self.$element.attr('name');\n                var removeImg = self.$element.data('src');\n                removeImg = removeImg.replace(/\\?\\d+/, '');\n                self.$template.append('<input type=\"hidden\" name=\"'+nameDeleteInput+'[remove]\" value=\"'+removeImg+'\">');\n                self.$template.find('img').attr('src', '');\n                self.$template.find('.imagepicker__action').css({'display': 'none'});\n                return false;\n            });\n        } else {\n            this.$template.find('.imagepicker__action').remove();\n        }\n\n    }\n\n    ImagePickerElem.prototype.init = function () {\n        this.$element.addClass(this.inputClass);\n        var src = this.$element.data('src');\n        this.$template = $(this.template);\n        this.$element.after(this.$template);\n        this.$removeBth  = this.$template.find('button');\n\n        if (src != undefined && src != '') {\n            var $img = $(this.templateImg).attr('src', src);\n            this.$template.find('.imagepicker__hover-place').append($img);\n        } else {\n            this.$template.find('.imagepicker__action').css({'display': 'none'});\n        }\n\n        this.$template.find('.imagepicker__hover-place').append(this.$element);\n    }\n\n    ImagePickerElem.prototype.changedImage = function () {\n        if (this.$element[0] && this.$element[0].files[0]) {\n            var file = this.$element[0].files[0];\n            this.$template.find('.imagepicker__action').css({'display': 'block'});\n\n            var reader = new FileReader();\n            var self = this;\n            reader.onload = (function (file){\n                return function (e) {\n                    var $img = self.$template.find('img');\n                    if ($img.length == 0) {\n                        $img = $(self.templateImg).attr('src', e.target.result);\n                        self.$template.find('.imagepicker__hover-place').append($img);\n                    } else {\n                        self.$template.find('img.imagepicker__miniature').attr('src', e.target.result);\n                    }\n                    self.$template.find('.imagepicker__hover-place').css({\n                        'background':'transparent'\n                    });\n                };\n            })(file);\n\n            reader.readAsDataURL(file);\n        }\n    }\n\n    var ImagePicker = function (option) {\n        return this.each(function () {\n            new ImagePickerElem(this, option);\n        });\n    };\n\n    var old = $.fn.imagepicker;\n\n    $.fn.imagepicker = ImagePicker;\n    $.fn.imagepicker.constructor = ImagePicker;\n\n    $.fn.imagepicker.noConflict = function () {\n        $.fn.imagepicker = old;\n        return this;\n    }\n\n}(jQuery);","+function ($) {\n    'use strict';\n\n    var ImagePickerMultItem = function ($pathToImage, $template, $pathToOrig, target) {\n        var template = '<div class=\"imagepickermult__item\">'+\n                            '<div class=\"imagepickermult__item__container\">'+\n                                '<img>'+\n                                '<span class=\"imagepickermult__ation-panel\">'+\n                                    '<button class=\"imagepickermult__btn imagepickermult__btn_remove\"><i class=\"fa fa-trash-o\" aria-hidden=\"true\"></i></button>'+\n                                '</span>'+\n                            '</div>'+\n                       '</div>';\n        var linkTemplate = '<button class=\"imagepickermult__btn imagepickermult__btn_link\" data-original-url=\"\"><i class=\"fa fa-link\" aria-hidden=\"true\"></i></button>';\n\n        this.target = target;\n        this.targetPath = $pathToOrig;\n        this.$elem = $(template);\n        this.$elem.find('img').attr('src', $pathToImage);\n        var nameOfFile = $pathToImage.split('/');\n        nameOfFile = nameOfFile[nameOfFile.length-1];\n        this.$elem.find('button.imagepickermult__btn_remove').data('name', nameOfFile);\n        if ($pathToOrig && !target) {\n            var $btnLink = $(linkTemplate);\n            $btnLink.data('content', $pathToOrig);\n            $btnLink.attr('title', 'Ссылка на оригинал');\n            $btnLink.data('placement', 'right');\n            $btnLink.data('container', 'body');\n            this.$elem.find('.imagepickermult__ation-panel').append($btnLink);\n            $btnLink.popover();\n        } else {\n            var $btnLink = $(linkTemplate);\n            $btnLink.attr('title', 'Вставить в текст');\n            this.$elem.find('.imagepickermult__ation-panel').append($btnLink);\n        }\n\n        $template.prepend(this.$elem);\n        this.$template = $template;\n\n        var self = this;\n\n        /* Тут инициализация действий при нажатии на кнопку */\n        this.$elem.find('.imagepickermult__btn_remove').bind('click.imagepickermult', function () {\n            self.deleteItem();\n            return false;\n        });\n\n        this.$elem.find('.imagepickermult__btn_link').bind('click.imagepickermult', function () {\n            self.targetLink();\n            return false;\n        });\n    };\n\n    //Вставляет ссылку на изображение в CKEditor\n    ImagePickerMultItem.prototype.targetLink = function () {\n        if (this.target) {\n            $('#cke_'+this.target).find('.cke_button.cke_button__image').click();\n            var self = this;\n            window.setTimeout(function () {\n                $('.cke_editor_'+self.target+'_dialog').find('input').first().val(self.targetPath);\n                console.log ($('.cke_edior_'+self.target+'_dialog').find('input'));\n            }, 300);\n        }\n    };\n\n    ImagePickerMultItem.prototype.deleteItem = function () {\n        var templateInput = '<input type=\"hidden\">';\n        var nameSpace = this.$template.data('namespace');\n        nameSpace = nameSpace+'[][remove]';\n\n        var nameOfFile = this.$elem.find('button.imagepickermult__btn_remove').data('name');\n        var $InputToRemove = $(templateInput);\n        $InputToRemove.attr('name', nameSpace).val(nameOfFile);\n        this.$elem.after($InputToRemove);\n        this.$elem.remove();\n    }\n\n    var ImagePickerAddItem = function ($elem, $template) {\n        var addBtnTpl = '<div class=\"imagepickermult__item add-toggle\">'+\n                            '<label class=\"imagepickermult__item__container\">'+\n                            '</label>'+\n                        '</div>';\n\n        this.templateImg = '<div class=\"imagepickermult__item\">'+\n                                '<div class=\"imagepickermult__item__container\">'+\n                                    '<img>'+\n                                    '<span class=\"imagepickermult__ation-panel\">'+\n                                        '<button class=\"imagepickermult__btn imagepickermult__btn_remove\"><i class=\"fa fa-trash-o\" aria-hidden=\"true\"></i></button>'+\n                                    '</span>'+\n                                '</div>'+\n                            '</div>';\n        this.deleteInputTmp = '<input type=\"hidden\">';\n\n        $elem.after($template);\n        $elem.css({\n            'display':'none'\n        });\n\n        this.$addBtn = $(addBtnTpl);\n        this.$elem = $elem;\n        this.$template = $template;\n\n        $template.append(this.$addBtn);\n\n        this.$addBtn.find('label').append($elem);\n\n        var self = this;\n        /* Тут инициализация действий при выборе изображения, изображений */\n        this.$elem.bind('change', function () {\n            self.addSelectedImage();\n        });\n    };\n\n    ImagePickerAddItem.prototype.addSelectedImage = function () {\n        /* Создаем миниатюру */\n        /* Перемещаем туда наш $elem */\n        /* Помещаем в кнопку добавления клон */\n        var files = this.$elem[0].files;\n\n        for (var i = 0; i < files.length; i++) {\n            var reader = new FileReader();\n            var self = this;\n            reader.onload = (function (files){\n                return function (e) {\n                    console.log (files);\n                    var $Image = $(self.templateImg);\n                    $Image.find('img').attr('src', e.target.result);\n                    $Image.find('.imagepicker__hover-place').css({\n                        'background':'transparent'\n                    });\n                    $Image.data('file-name', files.name);\n                    $Image.find('.imagepickermult__btn_remove').bind('click.imagepickermult', function () {\n                        var name = $(this).closest('.imagepickermult__item').data('file-name');\n                        var nameElem = self.$elem.attr('name')+\"[notupload]\";\n                        var $input = $(self.deleteInputTmp);\n                        $input.attr('name', nameElem);\n                        $input.val(name);\n                        $(this).closest('.imagepickermult__item').after($input);\n                        $(this).closest('.imagepickermult__item').remove();\n\n                    });\n\n                    self.$template.find('.add-toggle').before($Image);\n                };\n            })(files[i]);\n            reader.readAsDataURL(files[i]);\n        }\n\n    };\n\n    var ImagePickerMult = function (option) {\n        return this.each(function () {\n            /* тут главный конструктор для элемента this */\n            var template = '<div class=\"imagepickermult__container\">'+\n                            '</div>';\n            var hiddenNamespace = '<input type=\"hidden\">';\n\n\n\n            /* Сам элемент в представлении jQuery */\n            var $elem = $(this);\n\n            /* Загруженные изображения */\n            var images = $elem.data('upload-images');\n            images = images.split(',');\n            images.pop();\n\n            /* Оригиналы загруженных изображений */\n            var imagesOrig = $elem.data('upload-images-orig');\n            if (imagesOrig && imagesOrig.length > 0) {\n                imagesOrig = imagesOrig.split(',');\n                imagesOrig.pop();\n            }\n\n            /* Цель связь с CKEditor, будет передаваться в каждую миниатюру */\n            var targetCkEditor = $elem.data('target');\n\n\n\n            /* Неймспейс в котором храняться изображения */\n            var namespace = $elem.attr('id');\n\n            var $template = $(template);\n            $template.data('namespace', namespace);\n            /*\n            var $hiddenInput = $(hiddenNamespace);\n            $hiddenInput.attr('name', 'namespace');\n            $hiddenInput.val(namespace);\n            $template.append($hiddenInput);*/\n            /* Создаем кнопку добалвения элементов */\n            new ImagePickerAddItem($elem, $template);\n\n\n            for (var i = 0; i < images.length; i++) {\n                if (imagesOrig && imagesOrig[i]) {\n                    new ImagePickerMultItem(images[i], $template, imagesOrig[i], targetCkEditor);\n                } else {\n                    new ImagePickerMultItem(images[i], $template)\n                }\n\n            }\n\n\n\n        });\n    };\n\n    var old = $.fn.imagepickermult;\n\n    $.fn.imagepickermult = ImagePickerMult;\n    $.fn.imagepickermult.constructor = ImagePickerMult;\n\n    $.fn.imagepickermult.noConflict = function () {\n        $.fn.imagepickermult = old;\n        return this;\n    }\n}(jQuery);","$(document).ready(function () {\n    var DesignSwitcher = $('#designs_switcher');\n    var $input = DesignSwitcher.find('input[name=\"design_id\"]');\n    var $tabsButtons = DesignSwitcher.find('li > a');\n    var $tabsBody = DesignSwitcher.find('div.tab-pane');\n\n    $tabsButtons.bind('click', function () {\n        $input.val($(this).data('value'));\n\n        var buttons = $tabsBody.find('.btn.btn-default');\n        for (var i = 0; i < buttons.length; i++) {\n            buttons.eq(i).removeClass('active');\n            buttons.eq(i).find('input').prop('checked', false);\n        }\n    })\n});\n"]}